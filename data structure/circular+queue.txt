//Header Files 

#include<stdio.h> 

#define max 5 //Array size is constant so max is defined as constant 

 

//Global Declarations 

int cq[max]; 

int front = -1; 

int rear = -1; 

 

void enqueue(int item) //function definition enqueue() 

{ 

if((front == 0 && rear == max-1) || (front == rear+1)) //check if queue is full 

{ 

print("Queue Overflow \n"); 

return; 

} 

if (front == -1)  /*If queue is empty,means element to be inserted is Ist element,so set front and rear to 0*/ 

{ 

front = 0;//queue is empty so front will be 0 from -1 

rear = 0;//queue is empty so rear will be 0 from -1 

} 

else 

{ 

if(rear == max-1)	//check rear is at last position of queue,last position is max-1, so set rear to 0  

rear = 0; 

else //check rear is not at last position of queue, so increment rear by 1 

rear = rear+1; 

} 

cq[rear] = item ; //set new element item as rear element in cq[] 

}//end of enqueue() 

 

void dequeue()//function definition dequeue() 

{ 

if (front == -1)//check if queue is empty 

{ 

printf("Queue Underflow\n"); 

return ; 

} 

printf("Element deleted from queue is : %d\n",cq[front]); //print element at cq[front] 

if(front == rear) //queue has only one element,after deleting that element front and rear both will be -1 

{ 

front = -1; 

rear=-1; 

}//end of if 

else //queue has more than one element  

{	 

if(front == max-1)//front is at last position of queue,last position is max-1, so set front to 0  

front= 0; 

else  

front = front+1; //front is not at last position i.e. max-1 so increment front by 1 

}//end of else 

}//end of deqeueue() 

 

 

void display()//function definition display() 

{ 

int i; 

if(front==-1)//check queue is empty 

{ 

printf("\nQueue is empty\n"); 

return; 

} 

printf("\n Queue elements are "); 

if (front > rear)//if front is greater than rear,print elements from front to max-1 and 0 to rear 

{ 

        for (i = front; i <=max-1; i++) //from front to max-1 

                   printf("\n%d ", cq[i]);      

        for (i = 0; i <= rear-1; i++)//from 0 to rear-1 

            printf("\n%d ", cq[i]); 

}//end of if  

else //if rear is greater than front,print elements from front to rear  

{ 

        for (i = front; i <= rear; i++) 

            printf("\n%d ", cq[i]);     

}//end of else 

}//end of display() 

 

/*Begin of main*/ 

int main() 

{ 

int choice,item  

 

do 

{ 

printf("\n1.Enqueue\n"); 

printf("2.Dequeue\n"); 

printf("3.Display\n"); 

printf("4.Quit\n"); 

printf("Enter your choice : "); 

scanf("%d",&choice); 

 

switch(choice) 

{ 

case 1 : 

printf("Enter the element to be inserted in circular queue  : "); 

scanf("%d", &item); 

enqueue(item);//function call 

break; 

case 2 : 

dequeue();//function call 

break; 

case 3: 

display();//function call 

break; 

case 4: 

exit(0); 

break; 

   }//end of switch 

}while(choice!=4);//end of do while  

}//end of main() 

